# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

opt_out_crash_reporting

# If you want to automatically update fastlane if a new version is available:
update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.54.4"

default_platform :android

platform :android do
  before_all do
    ENV["CRASHLYTICS_API_TOKEN"] = "d1c91d54e078676f5a4cce31c32487999141a193"
    ENV["CRASHLYTICS_BUILD_SECRET"] = "87674eca32e08647cd65145b9c3be026f1649e98623bf6ac0a684fc4c823add0"
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
  end



# ======================================== Checkout ==================================================
desc "Ensuring clean repository checkout"
  lane :ensureCheckout do

  parent_branch = "master"

  # ensure_git_status_clean
  if ensure_branch_up_to_date_with_source(parent_branch)
    update_github_status("Checkout", "Up to date with #{parent_branch}", "success")
  else
    update_github_status("Checkout", "Outdated - merge in the #{parent_branch} branch first", "failure")
    notify("Branch `#{ENV['BUILD_URL']}` is behind `#{parent_branch}` - It needs to be updated before the review can start.", false)
    exit(1)
  end
end


# ======================================= Unit Test Lane =============================================
  desc "Runs all Unit tests"
  lane :unitTest do
    begin
      update_github_status("UnitTest", "Running tests", "pending")
      gradle(task: "test")
      update_github_status("UnitTest", "All tests passed", "success")
    rescue => ex
      update_github_status("UnitTest", "Testing failed", "failure")
      exit(1)
    end
  end

# =================================== Intrumented Test Lane ==========================================
  desc "Runs all Instrumented tests"
  lane :instrumentedTest do
    begin
      update_github_status("IntrumentedTest", "Running tests", "pending")
      gradle(task: "connectedAndroidTest")
      update_github_status("IntrumentedTest", "All tests passed", "success")
    rescue => ex
      update_github_status("IntrumentedTest", "Testing failed", "failure")
      exit(1)
    end
  end

# ======================================== Build Alpha ===============================================
  desc "Build alpha release"
  lane :alpha do
    gradle(task: "assembleRelease")
    # crashlytics
  end

# ===================================== Build Production =============================================



# ================================ Finalize Automated Testing ========================================
desc ""
lane :finalizeAutomatedTestingStage do |options|

  if options[:success]
    # slack(message: "New Pull Request ready for review!")
    # Slack success - ready for PR
  else
    # Slack failure
  end
end

# ==================================== Finalize Code Review ==========================================
desc ""
lane :finalizeCodeReviewStage do |options|

  if options[:success]
    # slack feature is ready for testing
    # update status ReadyToTest
  end
end

# ================================== Publish to Crashlytics ==========================================
  desc "Publishing to Crashlytics"
  lane :deployToCrashytics do

    ensure_git_branch(branch: 'feature\/.+')
    # ensure_git_status_clean

    name = git_branch.dup
    name.slice! "origin/"
    name.slice! "feature/"

    

    if ensure_branch_up_to_date_with_source('master')
      puts "XXX: true"
    else
      puts "XXX: false"
    end
    

    # update_github_status('test1','description 1','success')

    # gradle(task: "clean")

    # badge --shield "Version-0.0.3-blue" --dark --shield_geometry "+0+25%" --shield_scale 0.75

    # badge(shield: "CS-2132-orange", no_badge: true)
    # gradle(task: "assembleRelease")
    # crashlytics(
    #   notes: change_log_since_last_tag('alpha')
    # )
  end


# ================================== Publish to Google Play ==========================================



  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics

def notify(message, success)
  slack(
    message: message,
    channel: '#jenkins-test',
    success: success,
    payload: {
      "What's New" => "This is new",
      "Commit Hash" => get_commit_hash
    },
    default_payloads: []
  )
end

def ensure_branch_up_to_date_with_source(parent_branch)
  # Get common ancestor of both branches
  sha1 = sh("git merge-base @ origin/#{parent_branch}")
  # Get the latest revision on the parent bnrach
  sha2 = sh("git rev-parse origin/#{parent_branch}")
  return sha1 == sha2
end  

def update_github_status(job_name, desc, state)
  github_job_status(
    token: ENV['GITHUB_ACCESS_TOKEN'],
    owner: 'MarcinLament',
    repo: 'ClearScore',
    job_name: job_name,
    build_url: "#{ENV['BUILD_URL']}",
    description: desc,
    state: state
  )
end

def get_commit_hash 
  sh("git rev-parse --short HEAD").chomp
end

def change_log_since_last_tag(build_type)
  # http://git-scm.com/docs/pretty-formats
  # <short hash> <commit title>
  return changelog_from_git_commits(pretty: '%h %s', tag_match_pattern: "#{build_type}/*")
end
