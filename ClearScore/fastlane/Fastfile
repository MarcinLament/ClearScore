# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

fastlane_require 'slack-ruby-client'

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

opt_out_crash_reporting

# If you want to automatically update fastlane if a new version is available:
#update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.60.1"

default_platform :android

Slack.configure do |config|
  config.token = ENV['SLACK_TOKEN']
end

platform :android do
  before_all do
    ENV["CRASHLYTICS_API_TOKEN"] = "2e866a70dd80ed290acd7f36b1ea2dfb4f41e935"
    ENV["CRASHLYTICS_BUILD_SECRET"] = "cb3440eeb0a7983a4aa4606cc5ba20287fe4e9d2c6a4b535b05d000425b9f4c7"
    ENV["FASTLANE_HIDE_GITHUB_ISSUES"] = "1"
    ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
  end

# ======================================== Checkout ==================================================
  desc "Ensuring clean repository checkout"
    lane :ensureCheckout do |options|

    ensure_git_status_clean

    parent_branch = options[:parent_branch]
    if ensure_branch_up_to_date_with_source(parent_branch)
      update_github_status("Checkout", "Up to date with #{parent_branch}", "success")
    else
      update_github_status("Checkout", "Outdated - merge in the #{parent_branch} branch first", "failure")
      notify("Pull Request is behind `#{parent_branch}` - It needs to be updated before the review can start.", false, '#mobile-apps-dev-droid', ENV["CHANGE_AUTHOR_EMAIL"])
      exit(1)
    end
  end

# ======================================= Unit Test Lane =============================================
  desc "Runs all Unit tests"
  lane :unitTest do
    begin
      update_github_status("UnitTest", "Running tests", "pending")
      gradle(task: "testAlphaUnitTest")
      update_github_status("UnitTest", "All tests passed", "success")
    rescue => ex
      update_github_status("UnitTest", "Testing failed", "failure")
      notify("DEV: Pull Request \##{ENV['CHANGE_ID']} failed automated testing!", false, '#mobile-apps-dev-droid', ENV["CHANGE_AUTHOR_EMAIL"])
      exit(1)
    end
  end

# ====================================== Publish Alpha to Fabric ===========================================
  desc "Publishing to Fabric"
  lane :deployAlphaToFabric do |options|

    # ensure_git_branch(branch: 'feature\/.+|bug\/.+')
    ensure_git_status_clean

    update_github_status("AwaitingQA", "Ready for QA", "success")
    
    parent_branch = options[:parent_branch]
    if ensure_branch_up_to_date_with_source(parent_branch) == false
      update_github_status("Deploy", "Outdated - merge in the #{parent_branch} branch first", "failure")
      notify("Build failed because the branch is behind `#{parent_branch}`.", false, '#mobile-apps-dev-droid', ENV["CHANGE_AUTHOR_EMAIL"])
      exit(1)
    end

    feature_name = get_feature_name
    begin
      update_github_status("Deploy", "Deploying to Fabric", "pending")
      gradle(task: 'assembleAlpha -PClearScore.signing="' + get_keystore_location + '" -PVersionCode=' + options[:build_number])
      # notes = change_log_since_last_tag('alpha')
      notes = "Feature build: " + feature_name
      crashlytics(
        notes: notes
      )
      update_github_status("Deploy", "App published to Fabric", "success")
      update_github_status("ManualQA", "In test", "pending")
      notify("New feature `" + feature_name + "` published to Fabric and it's ready to be tested! `Build \#"+options[:build_number]+"`", true, '#mobile-apps', "")
    rescue => ex
      update_github_status("Deploy", "App cannot be published", "failure")
      notify("Failed building `" + feature_name + "`", false, '#mobile-apps-dev-droid', ENV["CHANGE_AUTHOR_EMAIL"])
      exit(1)
    end
  end
end

after_all do |lane|
  # This block is called, only if the executed lane was successful
end

error do |lane, exception|
end

# ============================================ Utils =================================================
def get_keystore_location
  return ENV['ANDROID_BUILD_UTILITY_DIR'] + "/" + ENV['GITHUB_REPO'] + "/Certs/ClearScore.signing"
end

def get_feature_name
  branch = ENV['SOURCE_BRANCH_NAME'].dup
  branch.slice! "origin/"
  branch.slice! "feature/"
  return branch
end

def notify(message, success, channel, user)
  notifyWithNotes(message, success, nil, channel, user)
end

def notifyWithNotes(message, success, notes, channel, user)
  channel = 'jenkins-test'
  if get_build_environment == 'CI'

    fields = []
    unless notes.nil? || notes.empty?
      fields.push({title: "What's New", value: notes, short: false})
    end

    change_url = ENV['CHANGE_URL']
    unless change_url.nil? || change_url.empty?
      fields.push({title: "", value: "<#{change_url}|Pull Request Details>", short: false})
    end

    job_url = ENV['RUN_DISPLAY_URL']
    unless job_url.nil? || job_url.empty?
      fields.push({title: "", value: "<#{job_url}|Jenkins Job Details>", short: false})
    end

    unless user.nil? || user.empty?
      slack_user = map_git_user_to_slack_username(user)
      unless slack_user.nil? || slack_user.empty?
        message = slack_user + ", " + message
      end
    end
    
    # post to slack
    client = Slack::Web::Client.new
    client.chat_postMessage(
      channel: channel, 
      link_names: 1, 
      attachments: [
        {
            text: message,
            color: success ? 'good' : 'danger',
            fields: fields,
            mrkdwn_in: ["text"]
        }
      ],
      as_user: true
    )
  end
end

def ensure_branch_up_to_date_with_source(parent_branch)
  # Get common ancestor of both branches
  sha1 = sh("git merge-base @ origin/#{parent_branch}")
  # Get the latest revision on the parent bnrach
  sha2 = sh("git rev-parse origin/#{parent_branch}")
  return sha1 == sha2
end  

def map_git_user_to_slack_username(git_user)
  return sh("curl #{ENV['BUILD_NUMBER_SERVER_URL']}/user/#{git_user} --silent").delete(" \t\r\n")
end

def update_github_status(job_name, desc, state)
  if get_build_environment == 'CI'
    github_job_status(
      token: ENV['GITHUB_ACCESS_TOKEN'],
      owner: ENV['GITHUB_REPO_OWNER'],
      repo: ENV['GITHUB_REPO'],
      job_name: job_name,
      build_url: "#{ENV['RUN_DISPLAY_URL']}",
      description: desc,
      state: state,
      sha: ENV['CHANGE_COMMIT_ID']
    )
  end
end

def get_build_environment
  return ENV['BUILD_ENVIRONMENT']
end

def get_commit_hash 
  sh("git rev-parse HEAD")
end

def change_log_since_last_tag(build_type)
  # http://git-scm.com/docs/pretty-formats
  # <short hash> <commit title>
  return changelog_from_git_commits(pretty: '%h %s', tag_match_pattern: "#{build_type}/*")
end
